[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module generate('http://www.eclipse.org/uml2/3.0.0/UML', 'http://www.openhealthtools.org/mdht/schemas/term/1','http://www.eclipse.org/emf/2002/Ecore','http://www.openhealthtools.org/mdht/schemas/term/1','http://www.ibm.com/xtools/1.5.3/Umlnotation')]



[template public generateElement(aPackage : Package)]
[comment @main/]

[generatePackageTopicTemplate(aPackage)/]
[generatePackageTopicGenerated(aPackage)/]
	[for (aClass : Class | aPackage.eContents(Class))]
		[generateClassTopicTemplate(aClass)/]
		[generateClassTopicGenerated(aClass)/]
	[/for]

	[for (aClass : Class | aPackage.eContents(Class)->sortedBy(name))]
		[for (property : Property | aClass.ownedAttribute->select(association = null))]
			[for (vsc: ValueSetConstraint| property.getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint)).oclAsType(ValueSetConstraint))]
				[let vsv  : ValueSetVersion = vsc.reference]
					[let ee : Enumeration = vsv.base_Enumeration.oclAsType(Enumeration)]
						[generateClassTopicTemplate(ee)/]
						[generateEnumerationTopicGenerated(ee)/]			
					[/let]
				[/let]
			[/for]
		[/for]
	[/for]


[generateContentBookMap(aPackage)/]

[generateMaps(aPackage)/]



[/template]

[template public generateContentBookMap(aPackage : Package)]
[file ('contents/'+aPackage.name.toLower()+'classes.ditamap', false, 'UTF-8')]
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE bookmap PUBLIC "-//OASIS//DTD DITA BookMap//EN" "bookmap.dtd">
<bookmap id="[aPackage.name/]">

	<chapter href="[aPackage.name/]Classes.dita" navtitle="[aPackage.name/]Classes" type="topic">
		<!-- document.ditamap is generated from the model -->
		<topicref format="ditamap" href="../maps/[aPackage.name.toLower()/]classes.ditamap" navtitle="[aPackage.name/]"/>
	</chapter>

</bookmap>
	
[/file]

[file ('contents/'+aPackage.name+'Classes.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
 "topic.dtd">
<topic id="topicId" xml:lang="en-us">
	<title>[aPackage.name/] Domain</title>
	<body>	
	[if (not aPackage.ownedComment->isEmpty())]
		[for (aComment : Comment | aPackage.ownedComment)]
			<p>[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]</p>
		[/for]

[if (not aPackage.eAnnotations->select(source='uml2.diagrams')->isEmpty())]
	[for (ea  : EAnnotation | aPackage.eAnnotations->select(source='uml2.diagrams'))]	
		[for (eo : EObject | ea.contents)]
			[if (eo.oclIsTypeOf(UMLDiagram))]
				[let diagram : UMLDiagram = eo.oclAsType(UMLDiagram)]
[generateDiagramTopicTemplate(diagram)/]
[generateDiagramTopicGenerated(diagram)/]
				[/let]
			[/if]		
		[/for]		
	[/for]
[/if]
	[/if]
	</body>
</topic>
[/file]


[file ('contents/enumerations.ditamap', false, 'UTF-8')]
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE bookmap PUBLIC "-//OASIS//DTD DITA BookMap//EN" "bookmap.dtd">
<bookmap id="[aPackage.name/]">

	<chapter href="Enumerations.dita" navtitle="Enumerations" type="topic">
		<!-- document.ditamap is generated from the model -->
		<topicref format="ditamap" href="../maps/enumerations.ditamap" navtitle="Enumerations"/>
	</chapter>

</bookmap>
	
[/file]

[file ('contents/Enumerations.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
 "topic.dtd">
<topic id="topicId" xml:lang="en-us">
	<title>ENUMERATIONS</title>
	<body>
		<p>Enumerations</p>
	</body>
</topic>
[/file]
[/template]


[template public generateMaps(aPackage : Package)]
[file ('maps/'+aPackage.name.toLower()+'classes.ditamap', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE map PUBLIC "-//OASIS//DTD DITA Map//EN" "map.dtd">
<map title="Classes">



[if (not aPackage.eAnnotations->select(source='uml2.diagrams')->isEmpty())]
<topichead navtitle="Diagrams">
	[for (ea  : EAnnotation | aPackage.eAnnotations->select(source='uml2.diagrams'))]	
		[for (eo : EObject | ea.contents)]
			[if (eo.oclIsTypeOf(UMLDiagram))]
				[let diagram : UMLDiagram = eo.oclAsType(UMLDiagram)]
<topicref href="../topics/t_[diagram.name.replaceAll('\\W+','')/]Diagram.dita" type="topic" />
				[/let]
			[/if]		
		[/for]		
	[/for]
</topichead>
[/if]



[if (not aPackage.eContents(Class)->isEmpty())]
<topichead navtitle="Definitions">
	[for (aClass : Class | aPackage.eContents(Class)->sortedBy(name))]
<topicref href="../topics/t_[aClass.name.replaceAll('\\W+','')/].dita" type="topic" />
	[/for]
</topichead>
[/if]

[if (not aPackage.eContents(Class).ownedAttribute->select(association = null).getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint))->isEmpty())]
<topichead navtitle="Terminology">	
	[for (eee : Enumeration |  aPackage.eContents(Class).ownedAttribute->select(association = null).getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint)).oclAsType(ValueSetConstraint).reference.base_Enumeration.oclAsType(Enumeration)->sortedBy(name)->asOrderedSet())]
		[let ee : Enumeration = eee.oclAsType(Enumeration)]
<topicref href="../topics/t_[ee.name.replaceAll('\\W+','')/].dita" type="topic" />
		[/let]
	[/for]
</topichead>	
[/if]

</map>
[/file]
[file ('maps/enumerations.ditamap', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE map PUBLIC "-//OASIS//DTD DITA Map//EN" "map.dtd">
<map title="Classes">
	[for (enumeration : Enumeration | aPackage.eContents(Enumeration)->sortedBy(name))]
<topicref href="../topics/t_[enumeration.name.replaceAll('\\W+','')/].dita" type="topic" />
	[/for]
</map>
[/file]


[/template]



[template public generatePackageTopicTemplate(aPackage : Package)]
[file ('topics/t_'+aPackage.name.replaceAll('\\W+','')+'Package.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="t_[aPackage.name.replaceAll('\\W+','')/]" xml:lang="en-us">
	<title conref="generated/_[aPackage.name.replaceAll('\\W+','')/]Package.dita#[aPackage.name.replaceAll('\\W+','')/]/title" />
	<shortdesc conref="generated/_[aPackage.name.replaceAll('\\W+','')/]Package.dita#[aPackage.name.replaceAll('\\W+','')/]/shortdesc" />
	<body conref="generated/_[aPackage.name.replaceAll('\\W+','')/]Package.dita#[aPackage.name.replaceAll('\\W+','')/]/body" />
</topic>
[/file]
[/template]

[template public generatePackageTopicGenerated(aPackage : Package)]
[file ('topics/generated/_'+aPackage.name.replaceAll('\\W+','')+'Package.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="[aPackage.name.replaceAll('\\W+','')/]" xml:lang="en-us">
<title id="title">[generateClassTitle(aPackage)/]</title>
<shortdesc id="shortdesc">[generateClassShortDescription(aPackage)/]</shortdesc>
<body id="body" >[generatePackageBody(aPackage)/]</body>
</topic>
[/file]
[/template]

[template public generateDiagramTopicTemplate(aDiagram : UMLDiagram)]
[file ('topics/t_'+aDiagram.name.replaceAll('\\W+','')+'Diagram.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="t_[aDiagram.name.replaceAll('\\W+','')/]" xml:lang="en-us">
	<title conref="generated/_[aDiagram.name.replaceAll('\\W+','')/]Diagram.dita#[aDiagram.name.replaceAll('\\W+','')/]/title" />
	<shortdesc conref="generated/_[aDiagram.name.replaceAll('\\W+','')/]Diagram.dita#[aDiagram.name.replaceAll('\\W+','')/]/shortdesc" />
	<body conref="generated/_[aDiagram.name.replaceAll('\\W+','')/]Diagram.dita#[aDiagram.name.replaceAll('\\W+','')/]/body" />
</topic>
[/file]
[/template]

[template public generateDiagramTopicGenerated(aDiagram : UMLDiagram)]
[file ('topics/generated/_'+aDiagram.name.replaceAll('\\W+','')+'Diagram.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="[aDiagram.name.replaceAll('\\W+','')/]" xml:lang="en-us">
<title id="title">[aDiagram.name/]</title>
<shortdesc id="shortdesc">[aDiagram.type/] Diagram</shortdesc>
<body id="body" >
<p>[   escapeXml(aDiagram.description).replaceAll('\\n', '</p><p>') /]</p>
<p><image href="../../diagrams/[diagram.type/]/[diagram.name.replaceAll('\\W+','')/].jpg" height="10in" width="7in" /></p>
</body>
</topic>
[/file]
[/template]




[template public generateClassTopicTemplate(aClass : Classifier)]
[file ('topics/t_'+aClass.name.replaceAll('\\W+','')+'.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="t_[aClass.name.replaceAll('\\W+','')/]" xml:lang="en-us">
	<title conref="generated/_[aClass.name.replaceAll('\\W+','')/].dita#[aClass.name.replaceAll('\\W+','')/]/title" />
	<shortdesc conref="generated/_[aClass.name.replaceAll('\\W+','')/].dita#[aClass.name.replaceAll('\\W+','')/]/shortdesc" />
	<body conref="generated/_[aClass.name.replaceAll('\\W+','')/].dita#[aClass.name.replaceAll('\\W+','')/]/body" />
</topic>
[/file]
[/template]

[template public generateClassTopicGenerated(aClass : Class)]
[file ('topics/generated/_'+aClass.name.replaceAll('\\W+','')+'.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="[aClass.name.replaceAll('\\W+','')/]" xml:lang="en-us">
<title id="title">[generateClassTitle(aClass)/]</title>
<shortdesc id="shortdesc">[generateClassShortDescription(aClass)/]</shortdesc>
<body id="body" >[generateClassBody(aClass)/]</body>
</topic>
[/file]
[/template]

[template public generateEnumerationTopicGenerated(enumeration : Enumeration)]
[file ('topics/generated/_'+enumeration.name.replaceAll('\\W+','')+'.dita', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="[enumeration.name.replaceAll('\\W+','')/]" xml:lang="en-us">
<title id="title">[generateClassTitle(enumeration)/]</title>
<shortdesc id="shortdesc">[generateClassShortDescription(enumeration)/]</shortdesc>
<body id="body" >[generateEnumerationBody(enumeration)/]</body>
</topic>
[/file]
[/template]


[template public generateClassTitle(ne  : NamedElement)]
[ne.name/]
[/template]

[template public generateClassTitleAlts(aClass  : Class)]
[aClass.name/]([aClass.qualifiedName/])
[/template]

[template public generateClassShortDescription(aClass  : NamedElement)]

[/template]

[template public generateClassProlog(aClass  : Class)]
[aClass.name/]([aClass.qualifiedName/])
[/template]

[template public generateClassBody(aClass  : Class)]


[generateClassGeneralizations(aClass) /]

[generateClassFullDescription(aClass) /]


[/template]


[template public generatePackageBody(aPackage  : Package)]



[generatePackageFullDescription(aPackage) /]





[/template]


[template public generateEnumerationBody(enumeration  : Enumeration)]

[getEnumerationDefinition(enumeration)/]

[/template]

[template public generateClassGeneralizations(aClass  : Class)]
[if (not aClass.parents()->isEmpty())]
<section id="generalizations"  audience="developer, modeler">
  <title>Hierarchy</title>
	[for (classifier : Classifier | aClass.parents())]
	[aClass.name/] is a kind of <xref href="../t_[classifier.name/].dita">[classifier.name/]</xref>	
	[/for]
</section>
[/if]
[/template]

[template public generateClassFullDescription(aClass  : Class)]
[if (not aClass.ownedComment->isEmpty())]
<section id="description" audience="developer, modeler, sme">
  <title>Description</title>
[for (aComment : Comment | aClass.ownedComment)]
	<p>[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]</p>

[/for]

[if (not aClass.ownedAttribute->isEmpty())]
	
<simpletable>
 <sthead>
  <stentry>Content</stentry>
  <stentry>Description</stentry>
 </sthead>
[for (property : Property | aClass.ownedAttribute->select(association = null)->sortedBy(name))]
 <strow>

  <stentry><p>[property.name/] :  [if (property.type.owner.oclIsKindOf(NamedElement) and not property.type.owner.oclAsType(NamedElement).name.equalsIgnoreCase('UMLPrimitiveTypes') )]<xref href="../t_[property.type.name/].dita" >[property.type.name/]</xref>[else][property.type.name/][/if] ([property.lower/]..[if (property.upper >= 0)][property.upper/][else]*[/if])</p> 
		[for (vsc: ValueSetConstraint| property.getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint)).oclAsType(ValueSetConstraint))]
				[let vsv  : ValueSetVersion = vsc.reference]
					[let ee : Enumeration = vsv.base_Enumeration.oclAsType(Enumeration)]
<p>See <xref href="../t_[ee.name.replaceAll('\\W+','')/].dita">[ee.name/]</xref> definition for values.</p>
					[/let]
				[/let]
			[/for]
</stentry>
  <stentry><p>[for (aComment : Comment | property.ownedComment)]
				[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]
			[/for]
			</p>
  </stentry>
  </strow>
[/for]

[for (property : Property | aClass.ownedAttribute->select(association <> null)->sortedBy(name))]
 <strow>
  <stentry><p>[property.name/] : <xref href="../t_[property.type.name/].dita" >[property.type.name/]</xref> ([property.lower/]..[if (property.upper >= 0)][property.upper/][else]*[/if])</p></stentry>
  <stentry><p>[for (aComment : Comment | property.ownedComment)]
				[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]
			[/for]
			</p>
  </stentry>
  </strow>
[/for]

</simpletable>
[/if]

</section>
[/if]



[/template]



[template public generatePackageFullDescription(aPackage  : Package)]
[if (not aPackage.ownedComment->isEmpty())]
<section id="description" audience="developer, modeler, sme">
  <title>Description</title>
[for (aComment : Comment | aPackage.ownedComment)]
	<p>[ escapeXml(aComment._body).replaceAll('\\n', '</p><p>') /]</p>

[/for]
</section>
[/if]



[/template]

[template public generateAttributes(aClass  : Class)]
[if (not aClass.ownedAttribute->select(association = null)->isEmpty() )]
<section id="attributes">
  <title>Attributes</title>
<ol>
[for (property : Property | aClass.ownedAttribute->select(association = null))]
	<li>[property.name/] : [property.type.name/] ([property.lower/]..[if (property.upper >= 0)][property.upper/][else]*[/if])</li>
[/for]
</ol>
</section>
[/if]


[/template]

[template public generateAssociations(aClass  : Class)]
[if (not aClass.ownedAttribute->select(association <> null)->isEmpty() )]
<section id="associations">
  <title>Associations</title>
<ol>
[for (property : Property | aClass.ownedAttribute->select(association <> null))]
	<li>[property.name/] : [property.type.name/] ([property.lower/]..[if (property.upper >= 0)][property.upper/][else]*[/if])</li>
[/for]
</ol>
</section>
[/if]
[/template]

[template public generateConstraints(aClass  : Class)]
[if (not aClass.ownedRule->isEmpty())]
<section id="constraints">
	<title>Constraints</title>
	<ul>


[if (not aClass.ownedAttribute->select(association = null)->isEmpty() )]
[for (property : Property | aClass.ownedAttribute->select(association = null))]
[for (valueSetConstraint : ValueSetConstraint | property.getStereotypeApplications()->select(oclIsTypeOf(ValueSetConstraint)))]
<li>[property.name /] <xref href="../t_[valueSetConstraint.reference.base_Enumeration.name.replaceAll('\\W+','')  /].dita">[valueSetConstraint.reference.base_Enumeration.name /] </xref> [valueSetConstraint.reference.identifier  /]</li>
[/for]
[/for]
[/if]




	</ul>




</section>
[/if]


[/template]

[template public generateAdditionalOperations(aClass  : Class)]
<section id="additionalOperations">
  <title>Additional Operations</title>
</section>
[/template]

[template public generateSemantics(aClass  : Class)]
<section id="semantics">
  <title>Semantics</title>
</section>
[/template]

[template public generateNotation(aClass  : Class)]
<section id="notation">
  <title>Notation</title>
</section>
[/template]

[template public generatePresentationOptions(aClass  : Class)]
<section id="presentationOptions">
  <title>Presentation Options</title>
</section>
[/template]

[template public generateExamples(aClass  : Class)]
<section id="examples">
  <title>Examples</title>
</section>
[/template]

[query public getEnumerationDefinition(enumeration : Enumeration) : String = invoke('org.openhealthtools.mdht.uml.cda.dita.TransformValueSet', 'getDefinition(org.eclipse.uml2.uml.Enumeration)', Sequence{enumeration})/]

[query public escapeXml(input : String) : String = invoke('org.apache.commons.lang.StringEscapeUtils', 'escapeXml(java.lang.String)', Sequence{input})/]

